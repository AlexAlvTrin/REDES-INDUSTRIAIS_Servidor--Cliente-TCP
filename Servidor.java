/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nossoservidor;

import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @Xandão ADM
 */
public class NossoServidor extends javax.swing.JFrame {

    private ServerSocket servidor;
    private LinkedList<Socket> clientes;
    private boolean status;
    
    public NossoServidor() {
        initComponents();
        this.clientes = new LinkedList<>();//Estrutura de dados de lista vinculada.
        this.status = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaChat = new javax.swing.JTextArea();
        campoEnviarMensagem = new javax.swing.JTextField();
        bOtaoEnviar = new javax.swing.JButton();
        espaçoPorta = new javax.swing.JTextField();
        jBotaoConectar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaClientesLogados = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaChat.setColumns(20);
        areaChat.setRows(5);
        jScrollPane1.setViewportView(areaChat);

        bOtaoEnviar.setText("Enviar");
        bOtaoEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOtaoEnviarActionPerformed(evt);
            }
        });

        espaçoPorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espaçoPortaActionPerformed(evt);
            }
        });

        jBotaoConectar.setText("Iniciar");
        jBotaoConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotaoConectarActionPerformed(evt);
            }
        });

        areaClientesLogados.setColumns(20);
        areaClientesLogados.setRows(5);
        jScrollPane2.setViewportView(areaClientesLogados);

        jLabel1.setText("Porta");

        jLabel2.setText("Usuarios Conectados");

        jLabel3.setText("CHAT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(57, Short.MAX_VALUE)
                        .addComponent(campoEnviarMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bOtaoEnviar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(81, 81, 81)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(espaçoPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBotaoConectar)
                .addGap(114, 114, 114))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(espaçoPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBotaoConectar))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoEnviarMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bOtaoEnviar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
       private void indentificaClientes() {
        //Mostra na aréa de usuarios conectados os clientes que estão com a conexão ativas
        String text = "";
        for (Socket cliente : clientes) {
            if (cliente.isConnected()) {
                text += cliente.getInetAddress().getHostAddress() + " " + cliente.getPort() + '\n';
            }
        }
        areaClientesLogados.setText(text);
    }   
    
    
    
    private void jBotaoConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotaoConectarActionPerformed

            if (this.status) {//Conectado
            //Estava conectado ouvindo uma porta e o usuário clicou para fechar a conexão
            //configura o campo da porta para criar uma nova conexão
            jBotaoConectar.setText("Conectar");
            espaçoPorta.setText("");
            espaçoPorta.setEditable(true);
            this.status = false;
            //Fecha as conexões com todos os clientes
            for (Socket cliente : clientes) {
                try {
                    cliente.close();
                } catch (IOException ex) {
                    Logger.getLogger(NossoServidor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {//Desconectado
            //Estava desconectado e o usuário clicou para abrir uma nova conexão
            //Adquiri a porta e verifica se o campo está vazio
            String porta = espaçoPorta.getText();
            if (!porta.equals("")) {//Inicia Servidor
                //configura o botão para desconectar e deixa não editavel o campo de porta
                jBotaoConectar.setText("Desconectar");
                espaçoPorta.setEditable(false);
                //Status recebe verdadeiro, ou seja, está conectado
                this.status = true;
                try {
                    //Converte a porta para um inteiro
                    int port = Integer.parseInt(porta);

                    //cria o servidor para ouvir a porta e aguarda conexões
                    this.servidor = new ServerSocket(port);

                    //Cria umaa thread para aceitar conexões de clientes
                    Thread ts;
                    ts = new Thread(new Runnable() {
                        public void run() {
                            try {
                                //Enquanto estiver conectado e aceita conexões de clientes
                                //Cria uma tread para tratar a comunicação com cada cliente
                                while (status) {
                                    Socket clie = servidor.accept();
                                    //cada cliente aceita pelo servidor ele coloca na lista de clientes
                                    //e mostra na area usuarios conectados
                                    clientes.add(clie);
                                    indentificaClientes();
                                    //cria uma thread para tratar o comunicação com cada cliente
                                    Thread tc;
                                    tc = new Thread(new Runnable() {
                                        @Override
                                        public void run() {
                                            try {
                                                //Monitora o recebimento de mensagens 
                                                //enquanto o fluxo dados estiver aberto(O método hasNextLine retorna verdadeiro se e somente se este scanner tiver outra linha de entrada) 
                                                //Vai concatenando as novas mensagens ao texto anterior e depois mostra esse resultado na area.Chat
                                                Scanner s = new Scanner(clie.getInputStream());
                                                while (s.hasNextLine()) {
                                                    String msg = s.nextLine();
                                                    String texto = areaChat.getText();
                                                    texto += ("\n") + clie.getInetAddress().getHostAddress() + " " + clie.getPort() + ":" + msg;
                                                    areaChat.setText(texto);
                                                }
                                                //Quando sair do while fluxo de dados foi fechado, significa que a comunicação com cliente caiu
                                                //então ele remove o cliente e atualiza a lista de clientes
                                                clientes.remove(clie);
                                                indentificaClientes();
                                            } catch (IOException ex) {
                                                //Não houve o estabelecimento de um fluxo de dados com o cliente
                                                //então ele remove o cliente e atualiza a lista de clientes
                                                clientes.remove(clie);
                                                indentificaClientes();
                                                Logger.getLogger(NossoServidor.class.getName()).log(Level.SEVERE, null, ex);
                                            }

                                        }
                                    });
                                    tc.start();
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(NossoServidor.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                    ts.start();
                } catch (IOException ex) {
                    jBotaoConectar.setText("Conectar");
                    espaçoPorta.setText("");
                    espaçoPorta.setEditable(true);
                    this.status = false;
                    JOptionPane.showMessageDialog(rootPane, "Porta inválida para a conexão ou a mesma já está em uso!");
                }

            }
        }





























    }//GEN-LAST:event_jBotaoConectarActionPerformed

    private void bOtaoEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOtaoEnviarActionPerformed

         //Envio de mensagens do servidor para os clientes
        //Verifica se o campo de mensgem não é vazio
        if (!campoEnviarMensagem.getText().equals("")) {
            try {
                //Percorre a lista de clientes e envia a mensagem para todos os clientes
                for (Socket cliente : clientes) {
                    PrintStream saida = new PrintStream(cliente.getOutputStream());
                    saida.println(campoEnviarMensagem.getText());
                    
                }
                String area = areaChat.getText();// adquirindo o texto na campo das mensagens recebidas e enviadas
                String messe = campoEnviarMensagem.getText();// adquirindo mensagm enviada
                area += ("\n") + ("Me: ") + messe;// concatenando as mensagens enviadas no campoEnviarMensagem  e area chat
                areaChat.setText(area);
                campoEnviarMensagem.setText("");
            } catch (IOException ex) {
                Logger.getLogger(NossoServidor.class.getName()).log(Level.SEVERE, null, ex);
            }

        }   














    }//GEN-LAST:event_bOtaoEnviarActionPerformed

    private void espaçoPortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espaçoPortaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_espaçoPortaActionPerformed

  
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NossoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NossoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NossoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NossoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NossoServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaChat;
    private javax.swing.JTextArea areaClientesLogados;
    private javax.swing.JButton bOtaoEnviar;
    private javax.swing.JTextField campoEnviarMensagem;
    private javax.swing.JTextField espaçoPorta;
    private javax.swing.JButton jBotaoConectar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
