/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nossocliente;

import java.io.IOException;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @Xandão ADM
 */
public class NossoCliente extends javax.swing.JFrame {

    private Socket conexao;
    private boolean status;
    
    public NossoCliente() {
        initComponents();
        this.status = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cAmpoIp = new javax.swing.JTextField();
        cAmpoPorta = new javax.swing.JTextField();
        jLabelIp = new javax.swing.JLabel();
        jLabelPorta = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        cAmpoMensagem = new javax.swing.JTextField();
        jConectarDesconectar = new javax.swing.JButton();
        jEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cAmpoIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAmpoIpActionPerformed(evt);
            }
        });

        cAmpoPorta.setToolTipText("");
        cAmpoPorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAmpoPortaActionPerformed(evt);
            }
        });

        jLabelIp.setText("IP(Servidor)");

        jLabelPorta.setText("Porta");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        cAmpoMensagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAmpoMensagemActionPerformed(evt);
            }
        });

        jConectarDesconectar.setText("Conectar");
        jConectarDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConectarDesconectarActionPerformed(evt);
            }
        });

        jEnviar.setText("Enviar");
        jEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cAmpoIp, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabelIp)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cAmpoPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabelPorta)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jConectarDesconectar)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cAmpoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jEnviar)
                        .addGap(0, 33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAmpoIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cAmpoPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConectarDesconectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIp)
                    .addComponent(jLabelPorta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAmpoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jEnviar))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cAmpoPortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAmpoPortaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cAmpoPortaActionPerformed

    private void cAmpoIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAmpoIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cAmpoIpActionPerformed

    private void cAmpoMensagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAmpoMensagemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cAmpoMensagemActionPerformed

    private void jConectarDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConectarDesconectarActionPerformed
            if (this.status) {
               jConectarDesconectar.setText("Conectar");
               cAmpoIp.setText("");
               cAmpoIp.setEditable(true);
               cAmpoPorta.setText("");
               cAmpoPorta.setEditable(true);
               this.status = false;
               try {
                    this.conexao.close();
               } catch (IOException ex){
                   Logger.getLogger(NossoCliente.class.getName()).log(Level.SEVERE, null, ex);

               }
            }else{
                
                    String ipString = (cAmpoIp.getText());
                    String portaString = cAmpoPorta.getText();
                    
                    
                    
                    if (!ipString.equals("") && !portaString.equals("")){
                         jConectarDesconectar.setText("Desconectar");
                         cAmpoIp.setEditable(false);
                         cAmpoPorta.setEditable(false);
                    
                         int port = Integer.parseInt(portaString);
                         this.status = true;
                         
                         Thread th;
                         
                         th = new Thread(new Runnable() {
                              public void run() {
                                 try {
                                     //Socket de comunicação é criado com o servidor e monitora o fluxo de dados
                                      conexao = new Socket(ipString, port);
                                       Scanner s = new Scanner(conexao.getInputStream());
                                       //O método hasNextLine retorna verdadeiro se e somente se este scanner tiver outra linha de entrada
                                        while (s.hasNextLine()) {
                                        // A cada nova linha de msg ele pega o texto e adiciona em jTextArea1 (no chat do cliente)
                                        String texto = jTextArea1.getText();
                                        String msg = s.nextLine();
                                        texto += ("\n") + ("Server: ") + msg;
                                        jTextArea1.setText(texto);
                            }
                            //Se sair do while significa o fluxo de dados foi interrompido e  a conexão
                            //com o servidor foi fechada. Então ele configura o sistema esperando uma nova conexão
                            //e dá mensagem "Você não está mais conectado ao Servidor!".
                            jConectarDesconectar.setText("Conectar");
                            cAmpoIp.setText("");
                            cAmpoIp.setEditable(true);
                            cAmpoPorta.setText("");
                            cAmpoPorta.setEditable(true);
                            status = false;
                            JOptionPane.showMessageDialog(rootPane, "Você não está mais conectado ao Servidor!");
                        } catch (IOException ex) {
                            //IP e/ou Porta inválidos.
                            jConectarDesconectar.setText("Conectar");
                            cAmpoIp.setEditable(true);
                            cAmpoPorta.setEditable(true);
                            status = false;
                            JOptionPane.showMessageDialog(rootPane, "IP e/ou Porta inválidos.");
                            }
                         }
                        });
                        th.start(); 
                        }
            
                }
    }//GEN-LAST:event_jConectarDesconectarActionPerformed

    private void jEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEnviarActionPerformed
                if (conexao.isConnected() && !cAmpoMensagem.getText().equals("")) {
                     try {
                             //Abre o fluxo de saída da conexão e envia a mensagem digitada
                             PrintStream saida = new PrintStream(conexao.getOutputStream());
                             saida.println(cAmpoMensagem.getText());
                             String area = jTextArea1.getText();// adquirindo o texto na campo das mensagens recebidas e enviadas
                             String messe = cAmpoMensagem.getText();// adquirindo mensagem enviada
                             area += ("\n") + ("Me: ") + messe;// concatenando as mensagens enviadas no campo das mensagens recebidas e enviadas anteriormente
                             jTextArea1.setText(area);
                             //limpa o campo de mensagem
                             cAmpoMensagem.setText("");
                         }catch (IOException ex) {
                             Logger.getLogger(NossoCliente.class.getName()).log(Level.SEVERE, null, ex);

            
                                }
                
                
                
                }
    }//GEN-LAST:event_jEnviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NossoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NossoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NossoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NossoCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NossoCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cAmpoIp;
    private javax.swing.JTextField cAmpoMensagem;
    private javax.swing.JTextField cAmpoPorta;
    private javax.swing.JButton jConectarDesconectar;
    private javax.swing.JButton jEnviar;
    private javax.swing.JLabel jLabelIp;
    private javax.swing.JLabel jLabelPorta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
